require 'rails_helper'
require 'active_support/testing/time_helpers'

# This spec was generated by rspec-rails when you ran the scaffold generator.
# It demonstrates how one might use RSpec to specify the controller code that
# was generated by Rails when you ran the scaffold generator.
#
# It assumes that the implementation code is generated by the rails scaffold
# generator.  If you are using any extension libraries to generate different
# controller code, this generated spec may or may not pass.
#
# It only uses APIs available in rails and/or rspec-rails.  There are a number
# of tools you can use to make these specs even more expressive, but we're
# sticking to rails and rspec-rails APIs to keep things simple and stable.
#
# Compared to earlier versions of this generator, there is very limited use of
# stubs and message expectations in this spec.  Stubs are only used when there
# is no simpler way to get a handle on the object needed for the example.
# Message expectations are only used when there is no simpler way to specify
# that an instance is receiving a specific message.
#
# Also compared to earlier versions of this generator, there are no longer any
# expectations of assigns and templates rendered. These features have been
# removed from Rails core in Rails 5, but can be added back in via the
# `rails-controller-testing` gem.




RSpec.describe GameReviewsController, type: :controller  do
  
  include ActiveSupport::Testing::TimeHelpers
  
  # This should return the minimal set of attributes required to create a valid
  # GameReview. As you add validations to GameReview, be sure to
  # adjust the attributes here as well.
  let(:valid_attributes) {
  }
 
  let(:valid_add_attributes) { 
    {description: 'description 1', stars: '1', name: 'name 1', developer: 'developer 1', review: 'review 1', genre: 'MMO'  } 
  }

  let(:invalid_attributes) {
    {description: 'description 1', stars: 'a', name: 'name 1', developer: 'developer 1', review: 'review 1', genre: 'MMO'  } 
  }

  # This should return the minimal set of values that should be in the session
  # in order to pass any filters (e.g. authentication) defined in
  # GameReviewsController. Be sure to keep this updated too.
  let(:valid_session) { {} }

  describe "GET #index @game_reviews" do
    it "returns a success response" do
      game_review = GameReview.create! valid_attributes
      get :index, {}, valid_session
      assigns(:game_reviews).should eq([game_review])
      expect(response).to be_success
    end
  end

  describe "GET #show @game_review" do
    it "returns a success response" do
        game_review1 = GameReview.create! valid_attributes
        get :show, {:id => game_review1.to_param}, valid_session
        expect(assigns(:game_review).attributes.symbolize_keys[:description]).to eq(game_review1[:description])
#        assigns(:game_review).should eq([game_review1])
      end
  
  end

  describe "GET #new" do
    it "returns a success response" do
      game_review = GameReview.create! valid_attributes
      get :new, {}, valid_session
      expect(response).to be_success
    end
  end

  describe "GET #edit" do
    it "returns a success response" do
      game_review = GameReview.create! valid_attributes
      get :edit, {:id => game_review.to_param}, valid_session
      expect(response).to be_success
    end
  end

  describe "POST create @game_review" do

    context "with valid params" do
    #describe "with valid params" do
      it "creates a new GameReview" do
        expect {
          post :create, game_review: valid_add_attributes 
        }.to change(GameReview, :count).by(1)
      end

      it "assigns a newly created game_review as @game_review" do
        game_review = GameReview.create! valid_attributes
        post :create, {:game_review => valid_add_attributes}, valid_session
        assigns(:game_review).should be_a(GameReview)
        assigns(:game_review).should be_persisted
      end

      it "redirects to the created game_review" do
        game_review = GameReview.create! valid_attributes
        post :create, {:game_review => valid_add_attributes}, valid_session
        expect(response).to redirect_to(GameReview.last)
      end
    end

    context "with invalid params" do
    #describe "with invalid params" do
      it "returns a success response (i.e. to display the 'new' template)" do
        post :create, {:game_review => invalid_attributes}, valid_session
        expect(response).not_to be_success
      end
    end

  end



  describe "PUT #update" do
    context "with valid params" do
      let(:new_attributes) {
        skip("Add a hash of attributes valid for your model")
      }

      it "updates the requested game_review" do
        game_review = GameReview.create! valid_attributes
        put :update, {:id => game_review.to_param, :game_review => new_attributes}, valid_session
        game_review.reload
        skip("Add assertions for updated state")
      end

      it "redirects to the game_review" do
        game_review = GameReview.create! valid_attributes
        put :update, {:id => game_review.to_param, :game_review => valid_add_attributes}, valid_session
        expect(response).to redirect_to(game_review)
      end
    end

    context "with invalid params" do
      it "returns a success response (i.e. to display the 'edit' template)" do
        game_review = GameReview.create! valid_attributes
        put :update, {:id => game_review.to_param, :game_review => invalid_attributes}, valid_session
        expect(response).not_to be_success
      end
    end
  end

  describe "DELETE #destroy" do
    it "destroys the requested game_review" do
      game_review = GameReview.create! valid_attributes
      expect {
        delete :destroy, {:id => game_review.to_param}, valid_session
      }.to change(GameReview, :count).by(-1)
    end

    it "redirects to the game_reviews list" do
      game_review = GameReview.create! valid_attributes
      delete :destroy, {:id => game_review.to_param}, valid_session
      expect(response).to redirect_to(game_reviews_url)
    end
  end
end
